#include <iostream>
#include<vector>

class Set {
public:

	Set() = default;
	~Set() = default;

	bool in_set(int rhs);
	void add(int rhs);
	void pop(int rhs);
	void print();

private:
	std::vector<bool>data_ = std::vector<bool>(1000, 0);
};

int main() {
	Set mn;
	std::cout << mn.in_set(40) << std::endl;
	mn.add(40);
	std::cout << mn.in_set(40) << std::endl;
	mn.add(905);
	mn.add(6);
	mn.add(1);
	mn.print();
	std::cout << std::endl;
	mn.pop(1);
	mn.print();
}

bool Set::in_set(int rhs) {
	if (rhs < 1000) {
		return data_[rhs];
	}
	else {
		std::cout << "out of range" << std::endl;
	}
}


void Set::pop(int rhs) {
	if (rhs < 1000) {
		data_[rhs] = 0;
	}
	else {
		std::cout << "number is out of range" << std::endl;
	}
}
void Set::print() {
	for (std::ptrdiff_t i = 0; i < 1000; i++) {
		if (data_[i]) {
			std::cout << i << ' ';
		}
	}
}

void Set::add(int rhs) {
	if (rhs < 1000) {
		data_[rhs] = 1;
	}
	else {
		std::cout << "number is out of range" << std::endl;
	}
}
