#include <iostream>
#include <vector>


class Tree {
public:
	Tree() = default;
	~Tree() = default;

	void push(int rhs);
	bool in_tree(int rhs);
	bool empty();
	void print();

private:
	struct Node {
		int value = 0;
		int count = 0;
	};
	std::vector<Node> data = std::vector<Node>(100);
	void for_print_(std::ptrdiff_t k);
	bool for_in_(int rhs, std::ptrdiff_t k);
};



int main()
{
	Tree t;
	t.push(-7);
	t.push(1);
	t.push(0);
	t.push(-95);
	t.push(65);
	t.print();
	std::cout << '\n';
	std::cout << t.in_tree(1) << ' ';
	std::cout << t.in_tree(-100);
}

void Tree::push(int rhs) {
	std::ptrdiff_t k = 0;
	while (data[k].count) {
		if (rhs < data[k].value) {
			k = 2 * k + 1;
		}
		else if (rhs == data[k].value) {
			break;
		}
		else {
			k = 2 * k + 2;
		}

	}
	data[k].count += 1;
	data[k].value = rhs;
}


bool Tree::empty() {
	return data[0].count;
}


void Tree::for_print_(std::ptrdiff_t k) {
	if (data[k].count) {
		for_print_(2 * k + 1);
		for (std::ptrdiff_t i = 0; i < data[k].count; i++) {
			std::cout << data[k].value << ' ';
		}
		for_print_(2 * k + 2);
	}
}

void Tree::print() {
	for_print_(0);
}


bool Tree::for_in_(int rhs, std::ptrdiff_t k) {
	if (data[k].count) {
		if (data[k].value == rhs) {
			return true;
		}

		if (rhs <= data[k].value) {
			return for_in_(rhs, k * 2 + 1);
		}
		else {
			return for_in_(rhs, k * 2 + 2);
		}
	}
	return false;
}

bool Tree::in_tree(int rhs) {
	return for_in_(rhs, 0);
}
