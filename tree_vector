#include <iostream>
#include <vector>
#include <stack>


class STree {
public:
	STree() = default;
	~STree() = default;
	void push(int rhs);
	bool for_inside(int rhs, std::ptrdiff_t k, bool flag);
	bool is_inside(int rhs);
	bool is_empty();
	void write_all();

private:
	struct Node {
		int value = 0;
		int count = 0;
	};
	std::vector<Node> data = std::vector<Node>(100);
	void dfs_for_write(std::ptrdiff_t k);
};



int main()
{
	STree a;
	a.push(9);
	a.push(89);
	a.push(78);
	a.push(5);
	a.push(6);
	a.write_all();
	std::cout << '\n';
	a.write_all();
	std::cout << '\n';
	std::cout << a.is_inside(5);
}

void STree::push(int rhs) {
	std::ptrdiff_t k = 0;
	while (data[k].count) {
		if (rhs < data[k].value) {
			k = 2 * k + 1;
		}
		else if (rhs == data[k].value) {
			break;
		}
		else {
			k = 2 * k + 2;
		}

	}
	data[k].count += 1;
	data[k].value = rhs;
}


bool STree::is_empty() {
	return data[0].count;
}


void STree::dfs_for_write(std::ptrdiff_t k) {
	if (data[k].count) {
		dfs_for_write(2 * k + 1);
		for (std::ptrdiff_t i = 0; i < data[k].count; i++) {
			std::cout << data[k].value << ' ';
		}
		dfs_for_write(2 * k + 2);
	}
}

void STree::write_all() {
	dfs_for_write(0);
}


bool STree::for_inside(int rhs, std::ptrdiff_t k, bool flag) {
	if (data[k].count) {
		if (data[k].value == rhs) {
			flag = 1;
		}
		for_inside(rhs, k * 2 + 1, flag);
		for_inside(rhs, k * 2 + 2, flag);
	}
	return flag;
}

bool STree::is_inside(int rhs) {
	return for_inside(rhs, 0);
}

